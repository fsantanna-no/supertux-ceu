#include "colors.ceu"
#include "ui-texture.ceu"
#include "ui-grid.ceu"

input _SDL_KeyboardEvent* SDL_KEYDOWN;

class MenusAnim with
    var UI* ui  = null;
    var int dt  = 0;
    var int sig = 0;
do
    _assert(this.ui  != null);
    _assert(this.sig != 0);
    _assert(this.dt   > 0);

    // TODO
    ui:align_x = _UI_ALIGN_LEFT;
    ui:align_y = _UI_ALIGN_TOP;

    var int y = ui:rect.y;
        finalize with
            ui:rect.y = y;      // finish in the initial position
            ui:_go(&ui:rect);
        end

    if this.sig == 1 then
        ui:rect.y = ui:rect.y - _WIN_H/2;
    else
        ui:rect.y = ui:rect.y + _WIN_H/2;
    end
    ui:_go(&ui:rect);

    var int dy = (y - ui:rect.y) * sig;

    loop do
        await 25ms;
        ui:rect.y = ui:rect.y + 25*dy/this.dt * sig;
        ui:_go(&ui:rect);
        if ui:rect.y*sig > y*sig then
            break;
        end
    end
end

class TitleMenu with
    // no interface
do
    // background
    var _SDL_Texture* bg_tex = null;
        finalize
            bg_tex = _IMG_LoadTexture(_REN,
                        "../data/images/title/background.png");
        with
            _SDL_DestroyTexture(bg_tex);
        end

    var _SDL_Rect bg_rect;
        bg_rect.x = _WIN_W / 2;
        bg_rect.y = _WIN_H / 2;

    var UITexture bg with
        this.ren = _REN;
        this.tex = bg_tex;
    end;
    bg._go(&bg_rect);

    // logo
    var _SDL_Texture* logo_tex = null;
        finalize
            logo_tex = _IMG_LoadTexture(_REN,
                        "../data/images/title/logo.png");
        with
            _SDL_DestroyTexture(logo_tex);
        end

    var _SDL_Rect logo_rect;
        logo_rect.x = _WIN_W / 2;
        logo_rect.y =  30;

    var UITexture logo with
        this.ren = _REN;
        this.tex = logo_tex;
        this.align_y = _UI_ALIGN_TOP;
    end;
    logo._go(&logo_rect);

    await FOREVER;
end

interface MenuItem with
    var   UI*    ui;
    var   int    toFocus?;
    var   int    focused?;
    event void   go_focused_toggle;
end

class MenuItemText with
    interface MenuItem;
    var _char* text;
    var int    toFocus? = 1;
    var int    focused? = 0;
do
    var _SDL_Texture* tex_white;
        finalize
            tex_white = _SDL_text2texture(_REN, _FONT, text,
                                          &_colors.white, null);
        with
            _SDL_DestroyTexture(tex_white);
        end

    var _SDL_Texture* tex_blue;
        finalize
            tex_blue = _SDL_text2texture(_REN, _FONT, text,
                                         &_colors.blue, null);
        with
            _SDL_DestroyTexture(tex_blue);
        end

    loop do
        if this.focused? then
            do
                var UITexture ui_blue with
                    this.ren = _REN;
                    this.tex = tex_blue;
                end;
                finalize
                    this.ui = &ui_blue;
                with
                    nothing;    // either white or blue
                end
                await this.go_focused_toggle;
            end
        else
            do
                var UITexture ui_white with
                    this.ren = _REN;
                    this.tex = tex_white;
                end;
                finalize
                    this.ui = &ui_white;
                with
                    nothing;    // either white or blue
                end
                await this.go_focused_toggle;
            end
        end
        this.focused? = not this.focused?;
    end
end

class MenuItemTextBox with
    interface MenuItem;
    var _char* text;
    var int    toFocus? = 1;
    var int    focused? = 0;
    var int    checked? = 0;
do
    var UIGrid grid with
        this.ren = _REN;
        this.lay_lins = 1;
        this.lay_cols = 3;
        this.lay = __MENUS_CEU_box_grid;
        this.uis_n = 2;
        native do
            int _MENUS_CEU_box_grid[] = {
                 0, 0, 1
            };
        end
        this.spc_y  = 5;
    end;
    this.ui = &grid;

    par do
        var _SDL_Texture* tex_white;
            finalize
                tex_white = _SDL_text2texture(_REN, _FONT, text,
                                              &_colors.white, null);
            with
                _SDL_DestroyTexture(tex_white);
            end

        var _SDL_Texture* tex_blue;
            finalize
                tex_blue = _SDL_text2texture(_REN, _FONT, text,
                                             &_colors.blue, null);
            with
                _SDL_DestroyTexture(tex_blue);
            end

        loop do
            if this.focused? then
                do
                    var UITexture ui_blue with
                        this.ren = _REN;
                        this.tex = tex_blue;
                    end;
                    grid._go_ui(0, &ui_blue)
                        finalize with
                            nothing;    // either white or blue
                        end;
                    await this.go_focused_toggle;
                end
            else
                do
                    var UITexture ui_white with
                        this.ren = _REN;
                        this.tex = tex_white;
                    end;
                    grid._go_ui(0, &ui_white)
                        finalize with
                            nothing;    // either white or blue
                        end;
                    await this.go_focused_toggle;
                end
            end
            this.focused? = not this.focused?;
        end
    with
        var _SDL_Texture* off_tex = null;
            finalize
                off_tex = _IMG_LoadTexture(_REN,
                            "../data/images/status/checkbox.png");
            with
                _SDL_DestroyTexture(off_tex);
            end

        var _SDL_Texture* on_tex = null;
            finalize
                on_tex = _IMG_LoadTexture(_REN,
                            "../data/images/status/checkbox-checked.png");
            with
                _SDL_DestroyTexture(on_tex);
            end

        loop do
            if this.checked? then
                do
                    var UITexture on with
                        this.ren = _REN;
                        this.tex = on_tex;
                    end;
                    grid._go_ui(1, &on)
                        finalize with
                            nothing;    // either on or off
                        end;
                    await this.ui:ok_clicked;
                end
            else
                do
                    var UITexture off with
                        this.ren = _REN;
                        this.tex = off_tex;
                    end;
                    grid._go_ui(1, &off)
                        finalize with
                            nothing;    // either on or off
                        end;
                    await this.ui:ok_clicked;
                end
            end
            this.checked? = not this.checked?;
        end
    end
end

class Menu with
    var int        n     =    0;
    var MenuItem** items = null;
    var int        cur   =    0;

    event int ok;
do
    _assert(this.n      > 0);
    _assert(this.items != null);

    var UIGrid grid with
        this.ren = _REN;
        this.lay_lins = n;
        this.lay_cols = 1;
        this.lay = __MENUS_CEU_grid;
        this.uis_n = n;
        native do
            int _MENUS_CEU_grid[] = {
                 0, 1, 2, 3, 4, 5, 6, 7, 8, 9
            };
        end
        this.spc_y  = 5;
        this.clr_bg = &_colors.gray_50;
    end;

    // fill grid
    loop i, this.n do
        grid.uis[i] = this.items[i]:ui;
    end

    var _SDL_Rect r;
        r.x = _WIN_W / 2;
        r.y = 2 * _WIN_H / 3;
        r.w = _WIN_W / 2;
        r.h = _WIN_H / 2;
    grid._go(&r);

    do
        var int sig = 1;
        loop i, this.n do
            spawn MenusAnim with
                this.ui  = grid.uis[i];
                this.dt  = 500;
                this.sig = sig;
                sig = sig * -1;
            end;
        end
        await 500ms;
    end

    par do
        loop do
            var _SDL_KeyboardEvent* key =
                await SDL_KEYDOWN
                until (key:keysym.sym == _SDLK_UP)
                   or (key:keysym.sym == _SDLK_DOWN);
            var int nxt = this.cur;

            loop do
                if key:keysym.sym == _SDLK_UP then
                    nxt = nxt - 1;
                    if nxt == -1 then
                        nxt = this.n - 1;
                    end
                else
                    nxt = (nxt + 1) % this.n;
                end

                // TODO: tight loop (assert at least one toFocus?=1)
                if this.items[nxt]:toFocus? then
                    emit this.items[cur]:go_focused_toggle;
                    emit this.items[nxt]:go_focused_toggle;
                    this.cur = nxt;
                    break;
                end
            end
        end
    with
        loop do
            var _SDL_KeyboardEvent* key = await SDL_KEYDOWN
                                          until key:keysym.sym == _SDLK_RETURN;
            emit this.items[cur]:ui:ok_clicked;
        end
    end
end

class MainMenu with
    var MenuItem*[5] items;
do
    var TitleMenu title;

    native do
        char _MENUS_CEU_main[][15] = {
            "Start Game",
            "Bonus Levels",
            "Options",
            "Level Editor",
            "Exit"
        };
        enum {
            _MENUS_CEU_main_Bonus   = 1,
            _MENUS_CEU_main_Options = 2,
            _MENUS_CEU_main_Exit    = 4
        };
    end

    var int i = 0;
    var MenuItemText[5] texts with
        this.text = __MENUS_CEU_main[i];
        this.focused? = (i==0);
        items[i] = &this;
        i = i + 1;
    end;

    var Menu menu with
        this.n     = 5;
        this.items = items;
    end;

    await FOREVER;
end

class BonusMenu with
    var MenuItem*[4] items;
do
    var TitleMenu title;

    native do
        char _MENUS_CEU_bonus[][20] = {
            "Bonus Levels",
            "Bonus Island I",
            "Bonus Island II",
            "Back"
        };
        enum {
            _MENUS_CEU_bonus_Back = 3
        };
    end

    var int i = 0;
    var MenuItemText[4] texts with
        this.text = __MENUS_CEU_bonus[i];
        this.toFocus? = (i != 0);
        this.focused? = (i == 1);
        items[i] = &this;
        i = i + 1;
    end;

    var Menu menu with
        this.n     = 4;
        this.items = items;
        this.cur   = 1;
    end;

    await FOREVER;
end

class OptionsMenu with
    var MenuItem*[8] items;
do
    var TitleMenu title;

    native do
        char _MENUS_CEU_options[][20] = {
            "Options",
            "Keyboard Setup",
            "Back",

            "OpenGL",
            "Fullscreen",
            "Sound",
            "Music",
            "Show FPS",
        };
        enum {
            _MENUS_CEU_options_Back = 7
        };
    end

    var int i = 0;
    var MenuItemText[3] texts with
        this.text = __MENUS_CEU_options[i];
        this.toFocus? = (i != 0);
        i = i + 1;
    end;

    i = 3;
    var MenuItemTextBox[5] boxes with
        this.text = __MENUS_CEU_options[i];
        this.focused? = (i == 3);
        this.checked? = (i%2 == 0);
        i = i + 1;
    end;

    this.items[0] = &texts[0];
    this.items[1] = &boxes[0];
    this.items[2] = &boxes[1];
    this.items[3] = &boxes[2];
    this.items[4] = &boxes[3];
    this.items[5] = &boxes[4];
    this.items[6] = &texts[1];
    this.items[7] = &texts[2];

    var Menu menu with
        this.n     = 8;
        this.items = items;
        this.cur   = 1;
    end;

    await FOREVER;
end
